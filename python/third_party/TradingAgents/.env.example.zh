# TradingAgents 环境变量示例（中文）
# 复制本文件为 .env 并按需填写你的真实值

# =============================================================================
# 必填 API KEY
# =============================================================================

# OpenAI API Key —— 用于 LLM 模型与在线数据检索
# 申请地址：https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# Finnhub API Key —— 金融新闻与内幕交易数据
# 申请地址：https://finnhub.io/register
FINNHUB_API_KEY=your_finnhub_api_key_here


# Embeddings（向量嵌入）API —— 记忆功能很重要（用于向量检索）
# 当你使用非 OpenAI 的聊天提供商（OpenRouter、Anthropic、Google）时，
# 这些提供商通常不支持 OpenAI 的 embeddings API，需要单独提供 OpenAI 的嵌入 Key。
# 若不设置，系统会尝试复用 OPENAI_API_KEY；如果仍不可用，记忆能力会受限。
# 申请地址：https://platform.openai.com/api-keys
EMBEDDER_API_KEY=your_openai_embeddings_key_here
# 默认嵌入模型服务地址（OpenAI 默认）
EMBEDDER_BASE_URL=your_embedding_model_backend_url_here
# 默认嵌入模型
EMBEDDER_MODEL_ID=text-embedding-3-small


# =============================================================================
# 可选 API KEY（只在选择对应提供商时需要）
# =============================================================================

# Anthropic API Key（仅在使用 Anthropic 模型时需要）
# https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google API Key（仅在使用 Google/Gemini 模型时需要）
# https://aistudio.google.com/app/apikey
GOOGLE_API_KEY=your_google_api_key_here


# =============================================================================
# 目录配置
# =============================================================================

# 结果输出目录
TRADINGAGENTS_RESULTS_DIR=./results

# 数据目录 —— 存放本地金融数据的根目录，应包含如下子目录：
# - market_data/price_data/
# - fundamental_data/simfin_data_all/
# - reddit_data/
# - finnhub_data/
TRADINGAGENTS_DATA_DIR=./data


# =============================================================================
# LLM 提供商配置
# =============================================================================

# 可选：openai, anthropic, google, ollama, openrouter
TRADINGAGENTS_LLM_PROVIDER=openai

# LLM 后端 URL
TRADINGAGENTS_BACKEND_URL=https://api.openai.com/v1

# 深度思考模型（复杂推理任务）
TRADINGAGENTS_DEEP_THINK_LLM=o4-mini

# 快速思考模型（快速分析场景）
TRADINGAGENTS_QUICK_THINK_LLM=gpt-4o-mini


# =============================================================================
# 分析流程配置
# =============================================================================

# 多头/空头研究员的辩论轮次（1-5）
TRADINGAGENTS_MAX_DEBATE_ROUNDS=1

# 风险分析师的风险讨论轮次（1-5）
TRADINGAGENTS_MAX_RISK_DISCUSS_ROUNDS=1

# 代理交互的最大递归深度
TRADINGAGENTS_MAX_RECUR_LIMIT=100

# 是否启用在线工具以获取实时数据（true/false）
TRADINGAGENTS_ONLINE_TOOLS=true


# =============================================================================
# 其它提供商示例（按需取消注释）
# =============================================================================

# Anthropic 示例
# TRADINGAGENTS_LLM_PROVIDER=anthropic
# TRADINGAGENTS_BACKEND_URL=https://api.anthropic.com/
# TRADINGAGENTS_DEEP_THINK_LLM=claude-sonnet-4-0
# TRADINGAGENTS_QUICK_THINK_LLM=claude-3-5-haiku-latest

# Google/Gemini 示例
# TRADINGAGENTS_LLM_PROVIDER=google
# TRADINGAGENTS_BACKEND_URL=https://generativelanguage.googleapis.com/v1
# TRADINGAGENTS_DEEP_THINK_LLM=gemini-2.0-flash
# TRADINGAGENTS_QUICK_THINK_LLM=gemini-2.0-flash-lite

# Ollama（本地）示例 —— 本地聊天与本地嵌入
# TRADINGAGENTS_LLM_PROVIDER=ollama
# TRADINGAGENTS_BACKEND_URL=http://localhost:11434/v1
# TRADINGAGENTS_DEEP_THINK_LLM=llama3.1
# TRADINGAGENTS_QUICK_THINK_LLM=llama3.2
# 注意：需提前拉取嵌入模型：`ollama pull nomic-embed-text`

# OpenRouter 示例 —— 重要：需要单独的 OpenAI Embeddings Key
# TRADINGAGENTS_LLM_PROVIDER=openrouter
# TRADINGAGENTS_BACKEND_URL=https://openrouter.ai/api/v1
# TRADINGAGENTS_DEEP_THINK_LLM=deepseek/deepseek-chat-v3-0324:free
# TRADINGAGENTS_QUICK_THINK_LLM=meta-llama/llama-3.3-8b-instruct:free
#
# 重要说明（OpenRouter 用户）：
# OpenRouter 不支持 OpenAI 的 embeddings API，但 TradingAgents 的“记忆/向量检索”需要它。
# 因此你必须同时设置：
# OPENAI_API_KEY=sk-or-v1-你的OpenRouter聊天Key（用于聊天）
# EMBEDDER_API_KEY=sk-你的真正OpenAI Key（用于嵌入）

# Azure OpenAI 示例
# TRADINGAGENTS_LLM_PROVIDER=azure
# TRADINGAGENTS_BACKEND_URL=https://your-endpoint.openai.azure.com/
# TRADINGAGENTS_DEEP_THINK_LLM=gpt-4o-mini
# TRADINGAGENTS_QUICK_THINK_LLM=gpt-4o-mini
# AZURE_OPENAI_API_VERSION=2025-04-01-preview


# =============================================================================
# Embeddings 故障排查
# =============================================================================

# 问题：报错 "AttributeError: 'str' object has no attribute 'data'"？
# 原因：使用了不支持 embeddings API 的提供商。

# 方案 1（推荐）—— 为嵌入单独使用 OpenAI Key：
# OPENAI_API_KEY=sk-or-v1-your-openrouter-key-here
# EMBEDDER_API_KEY=sk-your-real-openai-key-here

# 方案 2 —— 切换到 Ollama 完全本地化：
# TRADINGAGENTS_LLM_PROVIDER=ollama
# TRADINGAGENTS_BACKEND_URL=http://localhost:11434/v1
# 并执行：ollama pull llama3.1 && ollama pull nomic-embed-text

# 方案 3 —— 接受“记忆功能受限”：
# 若不设置 EMBEDDER_API_KEY，系统将使用兼容的降级策略继续运行，
# 但记忆（向量检索）能力会受限。

# 需要单独 Embeddings Key 的常见提供商：
# - OpenRouter (openrouter.ai)
# - Anthropic (api.anthropic.com)
# - Google/Gemini (generativelanguage.googleapis.com)

# 原生支持 Embeddings 的提供商：
# - OpenAI (api.openai.com) —— 同一 Key 支持聊天和嵌入
# - Ollama (localhost:11434) —— 本地嵌入（nomic-embed-text）


# =============================================================================
# 使用说明
# =============================================================================
# 1) 复制本文件为 .env：cp .env.example .env
# 2) 填写你的真实 API Key 与配置参数
# 3) 确保 .env 加入 .gitignore，防止 Key 泄露
# 4) 使用 OpenRouter 时：同时设置 OPENAI_API_KEY 与 EMBEDDER_API_KEY（见上）
# 5) 使用 Ollama 时：先拉取嵌入模型 `ollama pull nomic-embed-text`
# 6) 运行：python main.py 或 python -m cli.main

